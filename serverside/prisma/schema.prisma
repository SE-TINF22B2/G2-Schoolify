// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User_Login_Data {
  user_Login_DataID Int      @id @default(autoincrement())
  email             String   @unique
  password          String
  role              userRole
  Student           Student? @relation("User2Student")
  Teacher           Teacher? @relation("User2Teacher")
  Admin             Admin?   @relation("User2Admin")
  absent            Absent[]
}

model Student {
  studentID                        Int             @id @default(autoincrement())
  User_Login_Data                  User_Login_Data @relation("User2Student", fields: [user_Login_DataUser_Login_DataID], references: [user_Login_DataID])
  user_Login_DataUser_Login_DataID Int             @unique
  name                             String
  lastname                         String
  classClassID                     Int?
  Class                            Class?           @relation(fields: [classClassID], references: [classID])
  grades                           Grade[]
}

model Teacher {
  teacherID                        Int             @id @default(autoincrement())
  User_Login_Data                  User_Login_Data @relation("User2Teacher", fields: [user_Login_DataUser_Login_DataID], references: [user_Login_DataID])
  user_Login_DataUser_Login_DataID Int             @unique
  name                             String
  lastname                         String
  classes                          Role[]
  events                           Event[]
  grades                           Grade[]
}

model Admin {
  adminID                          Int             @id @default(autoincrement())
  User_Login_Data                  User_Login_Data @relation("User2Admin", fields: [user_Login_DataUser_Login_DataID], references: [user_Login_DataID])
  user_Login_DataUser_Login_DataID Int             @unique
  name                             String
  lastname                         String
}

model Role {
  roleID           Int      @id @default(autoincrement())
  Teacher          Teacher? @relation(fields: [teacherTeacherID], references: [teacherID])
  teacherTeacherID Int?
  Class            Class?   @relation(fields: [classClassID], references: [classID])
  classClassID     Int?
}

model Class {
  classID          Int              @id @default(autoincrement())
  roomNumber       Int
  year             String
  letter           String
  teachers         Role[]
  students         Student[]
  lessons          Lesson[]
  events           Event[]
  classbockEntries ClassbockEntry[]
}

model ClassbockEntry {
  classbockEntry Int      @id @default(autoincrement())
  date           DateTime
  note           String
  Class          Class?   @relation(fields: [classClassID], references: [classID])
  classClassID   Int?
}

model Lesson {
  lessonID         Int      @id @default(autoincrement())
  day              DateTime
  timeslot         Int      
  Test             Test?    @relation("Lesson2Test", fields: [testTestID], references: [testID])
  testTestID       Int?     @unique
  Class            Class?   @relation(fields: [classClassID], references: [classID])
  classClassID     Int?
  Subject          Subject? @relation(fields: [subjectSubjectID], references: [subjectID])
  subjectSubjectID Int?
}

model Absent {
  absentID                         Int              @id @default(autoincrement())
  dateFrom                         String
  dateTo                           String
  User_Login_Data                  User_Login_Data? @relation(fields: [user_Login_DataUser_Login_DataID], references: [user_Login_DataID])
  user_Login_DataUser_Login_DataID Int?
}

model Subject {
  subjectID Int      @id @default(autoincrement())
  name      String
  lessons   Lesson[]
  grades    Grade[]
}

model Test {
  testID Int     @id @default(autoincrement())
  Event  Event?  @relation("Event2Test")
  Lesson Lesson? @relation("Lesson2Test")
  topic  String
  grades Grade[]
}

model Event {
  eventID          Int       @id @default(autoincrement())
  topic            String
  testTestID       Int?      @unique
  Test             Test?     @relation("Event2Test", fields: [testTestID], references: [testID])
  description      String
  dateFrom         DateTime?
  dateTo           DateTime?
  Teacher          Teacher   @relation(fields: [teacherTeacherID], references: [teacherID])
  teacherTeacherID Int
  Class            Class     @relation(fields: [classClassID], references: [classID])
  classClassID     Int
}

model Grade {
  gradeID          Int      @id @default(autoincrement())
  grade            Float
  Test             Test?    @relation(fields: [testTestID], references: [testID])
  testTestID       Int?
  Student          Student? @relation(fields: [studentStudentID], references: [studentID])
  studentStudentID Int?
  Teacher          Teacher? @relation(fields: [teacherTeacherID], references: [teacherID])
  teacherTeacherID Int?
  Subject          Subject? @relation(fields: [subjectSubjectID], references: [subjectID])
  subjectSubjectID Int?
}

model FoodWeek {
  foodWeekID Int      @id @default(autoincrement())
  start      DateTime
  foods      Food[]
}

model Food {
  foodID             Int       @id @default(autoincrement())
  name               String
  shortName          String?
  description        String
  day                DateTime
  allergies          String?
  price              Float
  kategorie          kategorieEnum
  FoodWeek           FoodWeek? @relation(fields: [foodWeekFoodWeekID], references: [foodWeekID])
  foodWeekFoodWeekID Int?
  url                String?
}

enum userRole {
  Admin
  Teacher
  Student
}
enum kategorieEnum {
  Vegan
  Vegetarisch
  Rindfleisch
  Schweinefleisch
  Fisch
}